author: Rea Haas

main practice in the project is to change strings to other strings. (not necceserly need to understand all the assembly logic too deeply)

wright a function to translate string from a command to the asked binary string.
translate function need to not have any pre assumpyions.


recommandetions:
* avoid malloc function in the project.
** be sure to clean the symbol_table after every run of the assembler.
* build trim function to trim all the pre spaces, post spaces, and evrey raw of spaces become to one space. and between two adjacent commas no characters.
** after you use trim scan the line, that check if the format is as i expect it to be: mov r1,r2   // "garbege"=""


in the header file define an array of all the posible commands:



הנחיה :will always be relocation: (E,R,A =R)


שיטת מיעון היא דרך להבין מה הפקודה עושה,
האם היא משנה משתנה קיים, קופצת למקום אחר, 


in the first over just give numbers lines to each commands. 
make two varibals: 
* data_counter          // count how many lines of data
* instruction_counter   // count how many lines of instructions

this is needed so that after the first over, i can know the counting of my lines.
after the first move i have two tables:
* data_tables
* instructions_tabels
now i will arrange all the data lines after all the instraction lines 





how to orgenaize the files in the project:

* one file for the data structure for the tables: .h (API) , and .c (implimentatin) 
    occurences of that stracture are:
** the symbols table is build during the first over on the file.
** the table is a data structure that need to be build.
 
 
 * file .h to define all the maps for the commands.
 
constans.h
char * map_commands[] = {"mov" , "jmp" , "prn" , ... , NULL};
char * map_commands_binary [] {"0000","00001",...,NULL}    // sample
char * map_commands_addresing [] {"0,1,3" , "0,1,2" , ... , NULL}

you can use the map_commands to understand the "שיטת מיעון"  


